{-
   unpacking API
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: 0.1.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( AuthorResponse
    , Buttons
    , CreateSnippet
    , CreateTerm
    , CreateToken
    , CreateUser
    , Dialogs
    , Forms
    , Labels
    , Media(..), mediaVariants
    , MediaStatsResponse
    , Role(..), roleVariants
    , SnippetResponse
    , SnippetTermResponse
    , StatsResponse
    , TermGraphResponse
    , TermResponse
    , Titles
    , TokenResponse
    , Translation
    , UpdateSnippet
    , UpdateTerm
    , UpdateUser
    , UserResponse
    , encodeAuthorResponse
    , encodeButtons
    , encodeCreateSnippet
    , encodeCreateTerm
    , encodeCreateToken
    , encodeCreateUser
    , encodeDialogs
    , encodeForms
    , encodeLabels
    , encodeMedia
    , encodeMediaStatsResponse
    , encodeRole
    , encodeSnippetResponse
    , encodeSnippetTermResponse
    , encodeStatsResponse
    , encodeTermGraphResponse
    , encodeTermResponse
    , encodeTitles
    , encodeTokenResponse
    , encodeTranslation
    , encodeUpdateSnippet
    , encodeUpdateTerm
    , encodeUpdateUser
    , encodeUserResponse
    , authorResponseDecoder
    , buttonsDecoder
    , createSnippetDecoder
    , createTermDecoder
    , createTokenDecoder
    , createUserDecoder
    , dialogsDecoder
    , formsDecoder
    , labelsDecoder
    , mediaDecoder
    , mediaStatsResponseDecoder
    , roleDecoder
    , snippetResponseDecoder
    , snippetTermResponseDecoder
    , statsResponseDecoder
    , termGraphResponseDecoder
    , termResponseDecoder
    , titlesDecoder
    , tokenResponseDecoder
    , translationDecoder
    , updateSnippetDecoder
    , updateTermDecoder
    , updateUserDecoder
    , userResponseDecoder
    )

import Api
import Dict
import Json.Decode
import Json.Encode
import Uuid exposing (Uuid)


-- MODEL


type alias AuthorResponse =
    { id : Uuid
    , name : String
    }


type alias Buttons =
    { cancel : String
    , confirm : String
    , delete : String
    , edit : String
    , newSnippet : String
    , newTerm : String
    , newUser : String
    , signIn : String
    , signOut : String
    , source : String
    , submit : String
    , view : String
    }


type alias CreateSnippet =
    { text : String
    , media : Media
    , link : Maybe String
    , existingAuthors : List (Uuid)
    , newAuthors : List (String)
    , terms : List (Uuid)
    }


type alias CreateTerm =
    { name : String
    , related : List (Uuid)
    }


type alias CreateToken =
    { email : String
    , password : String
    }


type alias CreateUser =
    { name : String
    , role : Role
    , email : String
    , password : String
    }


type alias Dialogs =
    { confirmTitle : String
    }


type alias Forms =
    { authors : String
    , edit : String
    , link : String
    , media : String
    , mediaBlog : String
    , mediaBook : String
    , mediaNews : String
    , mediaTwitter : String
    , mediaVideo : String
    , mediaWebsite : String
    , name : String
    , onLengthLessThan : String
    , onNameEmpty : String
    , onPasswordEmpty : String
    , onSnippetEmpty : String
    , onUsernameEmpty : String
    , password : String
    , role : String
    , roleAdmin : String
    , roleUser : String
    , related : String
    , text : String
    , terms : String
    , username : String
    }


type alias Labels =
    { hello : String
    , loading : String
    , noSnippets : String
    , noTerms : String
    , noUsers : String
    , onError : String
    , onSignOut : String
    , videoThumbnail : String
    }


type Media
    = MediaBlog
    | MediaBook
    | MediaNews
    | MediaTwitter
    | MediaVideo
    | MediaWebsite


mediaVariants : List Media
mediaVariants =
    [ MediaBlog
    , MediaBook
    , MediaNews
    , MediaTwitter
    , MediaVideo
    , MediaWebsite
    ]


type alias MediaStatsResponse =
    { media : Media
    , count : Int
    }


type Role
    = RoleUser
    | RoleAdmin


roleVariants : List Role
roleVariants =
    [ RoleUser
    , RoleAdmin
    ]


type alias SnippetResponse =
    { id : Uuid
    , text : String
    , media : Media
    , link : Maybe String
    , authors : List (AuthorResponse)
    , terms : List (SnippetTermResponse)
    }


type alias SnippetTermResponse =
    { id : Uuid
    , name : String
    }


type alias StatsResponse =
    { media : List (MediaStatsResponse)
    }


type alias TermGraphResponse =
    { terms : List (String)
    , nodes : List (List (Int))
    }


type alias TermResponse =
    { id : Uuid
    , name : String
    , related : List (Uuid)
    }


type alias Titles =
    { home : String
    , name : String
    , snippets : String
    , sourceCode : String
    , stats : String
    , terms : String
    , users : String
    }


type alias TokenResponse =
    { id : Uuid
    , token : String
    , role : Role
    }


type alias Translation =
    { buttons : Buttons
    , titles : Titles
    , dialogs : Dialogs
    , forms : Forms
    , labels : Labels
    }


type alias UpdateSnippet =
    { text : String
    , media : Media
    , link : Maybe String
    , existingAuthors : List (Uuid)
    , newAuthors : List (String)
    , terms : List (Uuid)
    }


type alias UpdateTerm =
    { name : String
    , related : List (Uuid)
    }


type alias UpdateUser =
    { name : String
    , role : Role
    , email : String
    }


type alias UserResponse =
    { id : Uuid
    , name : String
    , email : String
    , role : Role
    }


-- ENCODER


encodeAuthorResponse : AuthorResponse -> Json.Encode.Value
encodeAuthorResponse =
    encodeObject << encodeAuthorResponsePairs


encodeAuthorResponseWithTag : ( String, String ) -> AuthorResponse -> Json.Encode.Value
encodeAuthorResponseWithTag (tagField, tag) model =
    encodeObject (encodeAuthorResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAuthorResponsePairs : AuthorResponse -> List EncodedField
encodeAuthorResponsePairs model =
    let
        pairs =
            [ encode "id" Uuid.encode model.id
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeButtons : Buttons -> Json.Encode.Value
encodeButtons =
    encodeObject << encodeButtonsPairs


encodeButtonsWithTag : ( String, String ) -> Buttons -> Json.Encode.Value
encodeButtonsWithTag (tagField, tag) model =
    encodeObject (encodeButtonsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeButtonsPairs : Buttons -> List EncodedField
encodeButtonsPairs model =
    let
        pairs =
            [ encode "cancel" Json.Encode.string model.cancel
            , encode "confirm" Json.Encode.string model.confirm
            , encode "delete" Json.Encode.string model.delete
            , encode "edit" Json.Encode.string model.edit
            , encode "new_snippet" Json.Encode.string model.newSnippet
            , encode "new_term" Json.Encode.string model.newTerm
            , encode "new_user" Json.Encode.string model.newUser
            , encode "sign_in" Json.Encode.string model.signIn
            , encode "sign_out" Json.Encode.string model.signOut
            , encode "source" Json.Encode.string model.source
            , encode "submit" Json.Encode.string model.submit
            , encode "view" Json.Encode.string model.view
            ]
    in
    pairs


encodeCreateSnippet : CreateSnippet -> Json.Encode.Value
encodeCreateSnippet =
    encodeObject << encodeCreateSnippetPairs


encodeCreateSnippetWithTag : ( String, String ) -> CreateSnippet -> Json.Encode.Value
encodeCreateSnippetWithTag (tagField, tag) model =
    encodeObject (encodeCreateSnippetPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateSnippetPairs : CreateSnippet -> List EncodedField
encodeCreateSnippetPairs model =
    let
        pairs =
            [ encode "text" Json.Encode.string model.text
            , encode "media" encodeMedia model.media
            , maybeEncode "link" Json.Encode.string model.link
            , encode "existing_authors" (Json.Encode.list Uuid.encode) model.existingAuthors
            , encode "new_authors" (Json.Encode.list Json.Encode.string) model.newAuthors
            , encode "terms" (Json.Encode.list Uuid.encode) model.terms
            ]
    in
    pairs


encodeCreateTerm : CreateTerm -> Json.Encode.Value
encodeCreateTerm =
    encodeObject << encodeCreateTermPairs


encodeCreateTermWithTag : ( String, String ) -> CreateTerm -> Json.Encode.Value
encodeCreateTermWithTag (tagField, tag) model =
    encodeObject (encodeCreateTermPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateTermPairs : CreateTerm -> List EncodedField
encodeCreateTermPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "related" (Json.Encode.list Uuid.encode) model.related
            ]
    in
    pairs


encodeCreateToken : CreateToken -> Json.Encode.Value
encodeCreateToken =
    encodeObject << encodeCreateTokenPairs


encodeCreateTokenWithTag : ( String, String ) -> CreateToken -> Json.Encode.Value
encodeCreateTokenWithTag (tagField, tag) model =
    encodeObject (encodeCreateTokenPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateTokenPairs : CreateToken -> List EncodedField
encodeCreateTokenPairs model =
    let
        pairs =
            [ encode "email" Json.Encode.string model.email
            , encode "password" Json.Encode.string model.password
            ]
    in
    pairs


encodeCreateUser : CreateUser -> Json.Encode.Value
encodeCreateUser =
    encodeObject << encodeCreateUserPairs


encodeCreateUserWithTag : ( String, String ) -> CreateUser -> Json.Encode.Value
encodeCreateUserWithTag (tagField, tag) model =
    encodeObject (encodeCreateUserPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateUserPairs : CreateUser -> List EncodedField
encodeCreateUserPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "role" encodeRole model.role
            , encode "email" Json.Encode.string model.email
            , encode "password" Json.Encode.string model.password
            ]
    in
    pairs


encodeDialogs : Dialogs -> Json.Encode.Value
encodeDialogs =
    encodeObject << encodeDialogsPairs


encodeDialogsWithTag : ( String, String ) -> Dialogs -> Json.Encode.Value
encodeDialogsWithTag (tagField, tag) model =
    encodeObject (encodeDialogsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDialogsPairs : Dialogs -> List EncodedField
encodeDialogsPairs model =
    let
        pairs =
            [ encode "confirm_title" Json.Encode.string model.confirmTitle
            ]
    in
    pairs


encodeForms : Forms -> Json.Encode.Value
encodeForms =
    encodeObject << encodeFormsPairs


encodeFormsWithTag : ( String, String ) -> Forms -> Json.Encode.Value
encodeFormsWithTag (tagField, tag) model =
    encodeObject (encodeFormsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFormsPairs : Forms -> List EncodedField
encodeFormsPairs model =
    let
        pairs =
            [ encode "authors" Json.Encode.string model.authors
            , encode "edit" Json.Encode.string model.edit
            , encode "link" Json.Encode.string model.link
            , encode "media" Json.Encode.string model.media
            , encode "media_blog" Json.Encode.string model.mediaBlog
            , encode "media_book" Json.Encode.string model.mediaBook
            , encode "media_news" Json.Encode.string model.mediaNews
            , encode "media_twitter" Json.Encode.string model.mediaTwitter
            , encode "media_video" Json.Encode.string model.mediaVideo
            , encode "media_website" Json.Encode.string model.mediaWebsite
            , encode "name" Json.Encode.string model.name
            , encode "on_length_less_than" Json.Encode.string model.onLengthLessThan
            , encode "on_name_empty" Json.Encode.string model.onNameEmpty
            , encode "on_password_empty" Json.Encode.string model.onPasswordEmpty
            , encode "on_snippet_empty" Json.Encode.string model.onSnippetEmpty
            , encode "on_username_empty" Json.Encode.string model.onUsernameEmpty
            , encode "password" Json.Encode.string model.password
            , encode "role" Json.Encode.string model.role
            , encode "role_admin" Json.Encode.string model.roleAdmin
            , encode "role_user" Json.Encode.string model.roleUser
            , encode "related" Json.Encode.string model.related
            , encode "text" Json.Encode.string model.text
            , encode "terms" Json.Encode.string model.terms
            , encode "username" Json.Encode.string model.username
            ]
    in
    pairs


encodeLabels : Labels -> Json.Encode.Value
encodeLabels =
    encodeObject << encodeLabelsPairs


encodeLabelsWithTag : ( String, String ) -> Labels -> Json.Encode.Value
encodeLabelsWithTag (tagField, tag) model =
    encodeObject (encodeLabelsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLabelsPairs : Labels -> List EncodedField
encodeLabelsPairs model =
    let
        pairs =
            [ encode "hello" Json.Encode.string model.hello
            , encode "loading" Json.Encode.string model.loading
            , encode "no_snippets" Json.Encode.string model.noSnippets
            , encode "no_terms" Json.Encode.string model.noTerms
            , encode "no_users" Json.Encode.string model.noUsers
            , encode "on_error" Json.Encode.string model.onError
            , encode "on_sign_out" Json.Encode.string model.onSignOut
            , encode "video_thumbnail" Json.Encode.string model.videoThumbnail
            ]
    in
    pairs


stringFromMedia : Media -> String
stringFromMedia model =
    case model of
        MediaBlog ->
            "Blog"

        MediaBook ->
            "Book"

        MediaNews ->
            "News"

        MediaTwitter ->
            "Twitter"

        MediaVideo ->
            "Video"

        MediaWebsite ->
            "Website"


encodeMedia : Media -> Json.Encode.Value
encodeMedia =
    Json.Encode.string << stringFromMedia


encodeMediaStatsResponse : MediaStatsResponse -> Json.Encode.Value
encodeMediaStatsResponse =
    encodeObject << encodeMediaStatsResponsePairs


encodeMediaStatsResponseWithTag : ( String, String ) -> MediaStatsResponse -> Json.Encode.Value
encodeMediaStatsResponseWithTag (tagField, tag) model =
    encodeObject (encodeMediaStatsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMediaStatsResponsePairs : MediaStatsResponse -> List EncodedField
encodeMediaStatsResponsePairs model =
    let
        pairs =
            [ encode "media" encodeMedia model.media
            , encode "count" Json.Encode.int model.count
            ]
    in
    pairs


stringFromRole : Role -> String
stringFromRole model =
    case model of
        RoleUser ->
            "User"

        RoleAdmin ->
            "Admin"


encodeRole : Role -> Json.Encode.Value
encodeRole =
    Json.Encode.string << stringFromRole


encodeSnippetResponse : SnippetResponse -> Json.Encode.Value
encodeSnippetResponse =
    encodeObject << encodeSnippetResponsePairs


encodeSnippetResponseWithTag : ( String, String ) -> SnippetResponse -> Json.Encode.Value
encodeSnippetResponseWithTag (tagField, tag) model =
    encodeObject (encodeSnippetResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSnippetResponsePairs : SnippetResponse -> List EncodedField
encodeSnippetResponsePairs model =
    let
        pairs =
            [ encode "id" Uuid.encode model.id
            , encode "text" Json.Encode.string model.text
            , encode "media" encodeMedia model.media
            , maybeEncode "link" Json.Encode.string model.link
            , encode "authors" (Json.Encode.list encodeAuthorResponse) model.authors
            , encode "terms" (Json.Encode.list encodeSnippetTermResponse) model.terms
            ]
    in
    pairs


encodeSnippetTermResponse : SnippetTermResponse -> Json.Encode.Value
encodeSnippetTermResponse =
    encodeObject << encodeSnippetTermResponsePairs


encodeSnippetTermResponseWithTag : ( String, String ) -> SnippetTermResponse -> Json.Encode.Value
encodeSnippetTermResponseWithTag (tagField, tag) model =
    encodeObject (encodeSnippetTermResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSnippetTermResponsePairs : SnippetTermResponse -> List EncodedField
encodeSnippetTermResponsePairs model =
    let
        pairs =
            [ encode "id" Uuid.encode model.id
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeStatsResponse : StatsResponse -> Json.Encode.Value
encodeStatsResponse =
    encodeObject << encodeStatsResponsePairs


encodeStatsResponseWithTag : ( String, String ) -> StatsResponse -> Json.Encode.Value
encodeStatsResponseWithTag (tagField, tag) model =
    encodeObject (encodeStatsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeStatsResponsePairs : StatsResponse -> List EncodedField
encodeStatsResponsePairs model =
    let
        pairs =
            [ encode "media" (Json.Encode.list encodeMediaStatsResponse) model.media
            ]
    in
    pairs


encodeTermGraphResponse : TermGraphResponse -> Json.Encode.Value
encodeTermGraphResponse =
    encodeObject << encodeTermGraphResponsePairs


encodeTermGraphResponseWithTag : ( String, String ) -> TermGraphResponse -> Json.Encode.Value
encodeTermGraphResponseWithTag (tagField, tag) model =
    encodeObject (encodeTermGraphResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTermGraphResponsePairs : TermGraphResponse -> List EncodedField
encodeTermGraphResponsePairs model =
    let
        pairs =
            [ encode "terms" (Json.Encode.list Json.Encode.string) model.terms
            , encode "nodes" (Json.Encode.list (Json.Encode.list Json.Encode.int)) model.nodes
            ]
    in
    pairs


encodeTermResponse : TermResponse -> Json.Encode.Value
encodeTermResponse =
    encodeObject << encodeTermResponsePairs


encodeTermResponseWithTag : ( String, String ) -> TermResponse -> Json.Encode.Value
encodeTermResponseWithTag (tagField, tag) model =
    encodeObject (encodeTermResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTermResponsePairs : TermResponse -> List EncodedField
encodeTermResponsePairs model =
    let
        pairs =
            [ encode "id" Uuid.encode model.id
            , encode "name" Json.Encode.string model.name
            , encode "related" (Json.Encode.list Uuid.encode) model.related
            ]
    in
    pairs


encodeTitles : Titles -> Json.Encode.Value
encodeTitles =
    encodeObject << encodeTitlesPairs


encodeTitlesWithTag : ( String, String ) -> Titles -> Json.Encode.Value
encodeTitlesWithTag (tagField, tag) model =
    encodeObject (encodeTitlesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTitlesPairs : Titles -> List EncodedField
encodeTitlesPairs model =
    let
        pairs =
            [ encode "home" Json.Encode.string model.home
            , encode "name" Json.Encode.string model.name
            , encode "snippets" Json.Encode.string model.snippets
            , encode "source_code" Json.Encode.string model.sourceCode
            , encode "stats" Json.Encode.string model.stats
            , encode "terms" Json.Encode.string model.terms
            , encode "users" Json.Encode.string model.users
            ]
    in
    pairs


encodeTokenResponse : TokenResponse -> Json.Encode.Value
encodeTokenResponse =
    encodeObject << encodeTokenResponsePairs


encodeTokenResponseWithTag : ( String, String ) -> TokenResponse -> Json.Encode.Value
encodeTokenResponseWithTag (tagField, tag) model =
    encodeObject (encodeTokenResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTokenResponsePairs : TokenResponse -> List EncodedField
encodeTokenResponsePairs model =
    let
        pairs =
            [ encode "id" Uuid.encode model.id
            , encode "token" Json.Encode.string model.token
            , encode "role" encodeRole model.role
            ]
    in
    pairs


encodeTranslation : Translation -> Json.Encode.Value
encodeTranslation =
    encodeObject << encodeTranslationPairs


encodeTranslationWithTag : ( String, String ) -> Translation -> Json.Encode.Value
encodeTranslationWithTag (tagField, tag) model =
    encodeObject (encodeTranslationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTranslationPairs : Translation -> List EncodedField
encodeTranslationPairs model =
    let
        pairs =
            [ encode "buttons" encodeButtons model.buttons
            , encode "titles" encodeTitles model.titles
            , encode "dialogs" encodeDialogs model.dialogs
            , encode "forms" encodeForms model.forms
            , encode "labels" encodeLabels model.labels
            ]
    in
    pairs


encodeUpdateSnippet : UpdateSnippet -> Json.Encode.Value
encodeUpdateSnippet =
    encodeObject << encodeUpdateSnippetPairs


encodeUpdateSnippetWithTag : ( String, String ) -> UpdateSnippet -> Json.Encode.Value
encodeUpdateSnippetWithTag (tagField, tag) model =
    encodeObject (encodeUpdateSnippetPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateSnippetPairs : UpdateSnippet -> List EncodedField
encodeUpdateSnippetPairs model =
    let
        pairs =
            [ encode "text" Json.Encode.string model.text
            , encode "media" encodeMedia model.media
            , maybeEncode "link" Json.Encode.string model.link
            , encode "existing_authors" (Json.Encode.list Uuid.encode) model.existingAuthors
            , encode "new_authors" (Json.Encode.list Json.Encode.string) model.newAuthors
            , encode "terms" (Json.Encode.list Uuid.encode) model.terms
            ]
    in
    pairs


encodeUpdateTerm : UpdateTerm -> Json.Encode.Value
encodeUpdateTerm =
    encodeObject << encodeUpdateTermPairs


encodeUpdateTermWithTag : ( String, String ) -> UpdateTerm -> Json.Encode.Value
encodeUpdateTermWithTag (tagField, tag) model =
    encodeObject (encodeUpdateTermPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateTermPairs : UpdateTerm -> List EncodedField
encodeUpdateTermPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "related" (Json.Encode.list Uuid.encode) model.related
            ]
    in
    pairs


encodeUpdateUser : UpdateUser -> Json.Encode.Value
encodeUpdateUser =
    encodeObject << encodeUpdateUserPairs


encodeUpdateUserWithTag : ( String, String ) -> UpdateUser -> Json.Encode.Value
encodeUpdateUserWithTag (tagField, tag) model =
    encodeObject (encodeUpdateUserPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateUserPairs : UpdateUser -> List EncodedField
encodeUpdateUserPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "role" encodeRole model.role
            , encode "email" Json.Encode.string model.email
            ]
    in
    pairs


encodeUserResponse : UserResponse -> Json.Encode.Value
encodeUserResponse =
    encodeObject << encodeUserResponsePairs


encodeUserResponseWithTag : ( String, String ) -> UserResponse -> Json.Encode.Value
encodeUserResponseWithTag (tagField, tag) model =
    encodeObject (encodeUserResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUserResponsePairs : UserResponse -> List EncodedField
encodeUserResponsePairs model =
    let
        pairs =
            [ encode "id" Uuid.encode model.id
            , encode "name" Json.Encode.string model.name
            , encode "email" Json.Encode.string model.email
            , encode "role" encodeRole model.role
            ]
    in
    pairs


-- DECODER


authorResponseDecoder : Json.Decode.Decoder AuthorResponse
authorResponseDecoder =
    Json.Decode.succeed AuthorResponse
        |> decode "id" Uuid.decoder 
        |> decode "name" Json.Decode.string 


buttonsDecoder : Json.Decode.Decoder Buttons
buttonsDecoder =
    Json.Decode.succeed Buttons
        |> decode "cancel" Json.Decode.string 
        |> decode "confirm" Json.Decode.string 
        |> decode "delete" Json.Decode.string 
        |> decode "edit" Json.Decode.string 
        |> decode "new_snippet" Json.Decode.string 
        |> decode "new_term" Json.Decode.string 
        |> decode "new_user" Json.Decode.string 
        |> decode "sign_in" Json.Decode.string 
        |> decode "sign_out" Json.Decode.string 
        |> decode "source" Json.Decode.string 
        |> decode "submit" Json.Decode.string 
        |> decode "view" Json.Decode.string 


createSnippetDecoder : Json.Decode.Decoder CreateSnippet
createSnippetDecoder =
    Json.Decode.succeed CreateSnippet
        |> decode "text" Json.Decode.string 
        |> decode "media" mediaDecoder 
        |> maybeDecode "link" Json.Decode.string Nothing
        |> decode "existing_authors" (Json.Decode.list Uuid.decoder) 
        |> decode "new_authors" (Json.Decode.list Json.Decode.string) 
        |> decode "terms" (Json.Decode.list Uuid.decoder) 


createTermDecoder : Json.Decode.Decoder CreateTerm
createTermDecoder =
    Json.Decode.succeed CreateTerm
        |> decode "name" Json.Decode.string 
        |> decode "related" (Json.Decode.list Uuid.decoder) 


createTokenDecoder : Json.Decode.Decoder CreateToken
createTokenDecoder =
    Json.Decode.succeed CreateToken
        |> decode "email" Json.Decode.string 
        |> decode "password" Json.Decode.string 


createUserDecoder : Json.Decode.Decoder CreateUser
createUserDecoder =
    Json.Decode.succeed CreateUser
        |> decode "name" Json.Decode.string 
        |> decode "role" roleDecoder 
        |> decode "email" Json.Decode.string 
        |> decode "password" Json.Decode.string 


dialogsDecoder : Json.Decode.Decoder Dialogs
dialogsDecoder =
    Json.Decode.succeed Dialogs
        |> decode "confirm_title" Json.Decode.string 


formsDecoder : Json.Decode.Decoder Forms
formsDecoder =
    Json.Decode.succeed Forms
        |> decode "authors" Json.Decode.string 
        |> decode "edit" Json.Decode.string 
        |> decode "link" Json.Decode.string 
        |> decode "media" Json.Decode.string 
        |> decode "media_blog" Json.Decode.string 
        |> decode "media_book" Json.Decode.string 
        |> decode "media_news" Json.Decode.string 
        |> decode "media_twitter" Json.Decode.string 
        |> decode "media_video" Json.Decode.string 
        |> decode "media_website" Json.Decode.string 
        |> decode "name" Json.Decode.string 
        |> decode "on_length_less_than" Json.Decode.string 
        |> decode "on_name_empty" Json.Decode.string 
        |> decode "on_password_empty" Json.Decode.string 
        |> decode "on_snippet_empty" Json.Decode.string 
        |> decode "on_username_empty" Json.Decode.string 
        |> decode "password" Json.Decode.string 
        |> decode "role" Json.Decode.string 
        |> decode "role_admin" Json.Decode.string 
        |> decode "role_user" Json.Decode.string 
        |> decode "related" Json.Decode.string 
        |> decode "text" Json.Decode.string 
        |> decode "terms" Json.Decode.string 
        |> decode "username" Json.Decode.string 


labelsDecoder : Json.Decode.Decoder Labels
labelsDecoder =
    Json.Decode.succeed Labels
        |> decode "hello" Json.Decode.string 
        |> decode "loading" Json.Decode.string 
        |> decode "no_snippets" Json.Decode.string 
        |> decode "no_terms" Json.Decode.string 
        |> decode "no_users" Json.Decode.string 
        |> decode "on_error" Json.Decode.string 
        |> decode "on_sign_out" Json.Decode.string 
        |> decode "video_thumbnail" Json.Decode.string 


mediaDecoder : Json.Decode.Decoder Media
mediaDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "Blog" ->
                        Json.Decode.succeed MediaBlog

                    "Book" ->
                        Json.Decode.succeed MediaBook

                    "News" ->
                        Json.Decode.succeed MediaNews

                    "Twitter" ->
                        Json.Decode.succeed MediaTwitter

                    "Video" ->
                        Json.Decode.succeed MediaVideo

                    "Website" ->
                        Json.Decode.succeed MediaWebsite

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


mediaStatsResponseDecoder : Json.Decode.Decoder MediaStatsResponse
mediaStatsResponseDecoder =
    Json.Decode.succeed MediaStatsResponse
        |> decode "media" mediaDecoder 
        |> decode "count" Json.Decode.int 


roleDecoder : Json.Decode.Decoder Role
roleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "User" ->
                        Json.Decode.succeed RoleUser

                    "Admin" ->
                        Json.Decode.succeed RoleAdmin

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


snippetResponseDecoder : Json.Decode.Decoder SnippetResponse
snippetResponseDecoder =
    Json.Decode.succeed SnippetResponse
        |> decode "id" Uuid.decoder 
        |> decode "text" Json.Decode.string 
        |> decode "media" mediaDecoder 
        |> maybeDecode "link" Json.Decode.string Nothing
        |> decode "authors" (Json.Decode.list authorResponseDecoder) 
        |> decode "terms" (Json.Decode.list snippetTermResponseDecoder) 


snippetTermResponseDecoder : Json.Decode.Decoder SnippetTermResponse
snippetTermResponseDecoder =
    Json.Decode.succeed SnippetTermResponse
        |> decode "id" Uuid.decoder 
        |> decode "name" Json.Decode.string 


statsResponseDecoder : Json.Decode.Decoder StatsResponse
statsResponseDecoder =
    Json.Decode.succeed StatsResponse
        |> decode "media" (Json.Decode.list mediaStatsResponseDecoder) 


termGraphResponseDecoder : Json.Decode.Decoder TermGraphResponse
termGraphResponseDecoder =
    Json.Decode.succeed TermGraphResponse
        |> decode "terms" (Json.Decode.list Json.Decode.string) 
        |> decode "nodes" (Json.Decode.list (Json.Decode.list Json.Decode.int)) 


termResponseDecoder : Json.Decode.Decoder TermResponse
termResponseDecoder =
    Json.Decode.succeed TermResponse
        |> decode "id" Uuid.decoder 
        |> decode "name" Json.Decode.string 
        |> decode "related" (Json.Decode.list Uuid.decoder) 


titlesDecoder : Json.Decode.Decoder Titles
titlesDecoder =
    Json.Decode.succeed Titles
        |> decode "home" Json.Decode.string 
        |> decode "name" Json.Decode.string 
        |> decode "snippets" Json.Decode.string 
        |> decode "source_code" Json.Decode.string 
        |> decode "stats" Json.Decode.string 
        |> decode "terms" Json.Decode.string 
        |> decode "users" Json.Decode.string 


tokenResponseDecoder : Json.Decode.Decoder TokenResponse
tokenResponseDecoder =
    Json.Decode.succeed TokenResponse
        |> decode "id" Uuid.decoder 
        |> decode "token" Json.Decode.string 
        |> decode "role" roleDecoder 


translationDecoder : Json.Decode.Decoder Translation
translationDecoder =
    Json.Decode.succeed Translation
        |> decode "buttons" buttonsDecoder 
        |> decode "titles" titlesDecoder 
        |> decode "dialogs" dialogsDecoder 
        |> decode "forms" formsDecoder 
        |> decode "labels" labelsDecoder 


updateSnippetDecoder : Json.Decode.Decoder UpdateSnippet
updateSnippetDecoder =
    Json.Decode.succeed UpdateSnippet
        |> decode "text" Json.Decode.string 
        |> decode "media" mediaDecoder 
        |> maybeDecode "link" Json.Decode.string Nothing
        |> decode "existing_authors" (Json.Decode.list Uuid.decoder) 
        |> decode "new_authors" (Json.Decode.list Json.Decode.string) 
        |> decode "terms" (Json.Decode.list Uuid.decoder) 


updateTermDecoder : Json.Decode.Decoder UpdateTerm
updateTermDecoder =
    Json.Decode.succeed UpdateTerm
        |> decode "name" Json.Decode.string 
        |> decode "related" (Json.Decode.list Uuid.decoder) 


updateUserDecoder : Json.Decode.Decoder UpdateUser
updateUserDecoder =
    Json.Decode.succeed UpdateUser
        |> decode "name" Json.Decode.string 
        |> decode "role" roleDecoder 
        |> decode "email" Json.Decode.string 


userResponseDecoder : Json.Decode.Decoder UserResponse
userResponseDecoder =
    Json.Decode.succeed UserResponse
        |> decode "id" Uuid.decoder 
        |> decode "name" Json.Decode.string 
        |> decode "email" Json.Decode.string 
        |> decode "role" roleDecoder 




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f