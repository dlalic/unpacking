{-
   unpacking API
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: 0.1.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Default exposing
    ( createAuth
    , createSnippets
    , createTerms
    , createUsers
    , deleteSnippets
    , deleteTerms
    , deleteUsers
    , readAllAuthors
    , readAllSnippets
    , readAllTerms
    , readAllTranslations
    , readAllUsers
    , readUsers
    , snippetsStatsGet
    , termsGraphGet
    , updateSnippets
    , updateTerms
    , updateUsers
    )

import Api
import Api.Data
import Dict
import Http
import Json.Decode
import Json.Encode
import Uuid exposing (Uuid)



createAuth : Api.Data.CreateToken -> Api.Request Api.Data.TokenResponse
createAuth createToken_body =
    Api.request
        "POST"
        "/auth"
        []
        []
        []
        (Just (Api.Data.encodeCreateToken createToken_body))
        Api.Data.tokenResponseDecoder



createSnippets : Api.Data.CreateSnippet -> String -> Api.Request Uuid
createSnippets createSnippet_body auth_token =
    Api.request
        "POST"
        "/snippets"
        []
        []
        []
        (Just (Api.Data.encodeCreateSnippet createSnippet_body))
        Uuid.decoder
        |> Api.withBearerToken auth_token



createTerms : Api.Data.CreateTerm -> String -> Api.Request Uuid
createTerms createTerm_body auth_token =
    Api.request
        "POST"
        "/terms"
        []
        []
        []
        (Just (Api.Data.encodeCreateTerm createTerm_body))
        Uuid.decoder
        |> Api.withBearerToken auth_token



createUsers : Api.Data.CreateUser -> String -> Api.Request Uuid
createUsers createUser_body auth_token =
    Api.request
        "POST"
        "/users"
        []
        []
        []
        (Just (Api.Data.encodeCreateUser createUser_body))
        Uuid.decoder
        |> Api.withBearerToken auth_token



deleteSnippets : Uuid -> String -> Api.Request ()
deleteSnippets id_path auth_token =
    Api.request
        "DELETE"
        "/snippets/{id}"
        [ ( "id", Uuid.toString id_path ) ]
        []
        []
        Nothing
        (Json.Decode.succeed ())
        |> Api.withBearerToken auth_token



deleteTerms : Uuid -> String -> Api.Request ()
deleteTerms id_path auth_token =
    Api.request
        "DELETE"
        "/terms/{id}"
        [ ( "id", Uuid.toString id_path ) ]
        []
        []
        Nothing
        (Json.Decode.succeed ())
        |> Api.withBearerToken auth_token



deleteUsers : Uuid -> String -> Api.Request ()
deleteUsers id_path auth_token =
    Api.request
        "DELETE"
        "/users/{id}"
        [ ( "id", Uuid.toString id_path ) ]
        []
        []
        Nothing
        (Json.Decode.succeed ())
        |> Api.withBearerToken auth_token



readAllAuthors : String -> Api.Request (List Api.Data.AuthorResponse)
readAllAuthors auth_token =
    Api.request
        "GET"
        "/authors"
        []
        []
        []
        Nothing
        (Json.Decode.list Api.Data.authorResponseDecoder)
        |> Api.withBearerToken auth_token



readAllSnippets : String -> Api.Request (List Api.Data.SnippetResponse)
readAllSnippets auth_token =
    Api.request
        "GET"
        "/snippets"
        []
        []
        []
        Nothing
        (Json.Decode.list Api.Data.snippetResponseDecoder)
        |> Api.withBearerToken auth_token



readAllTerms : String -> Api.Request (List Api.Data.TermResponse)
readAllTerms auth_token =
    Api.request
        "GET"
        "/terms"
        []
        []
        []
        Nothing
        (Json.Decode.list Api.Data.termResponseDecoder)
        |> Api.withBearerToken auth_token



readAllTranslations : Api.Request Api.Data.Translation
readAllTranslations =
    Api.request
        "GET"
        "/translations"
        []
        []
        []
        Nothing
        Api.Data.translationDecoder



readAllUsers : String -> Api.Request (List Api.Data.UserResponse)
readAllUsers auth_token =
    Api.request
        "GET"
        "/users"
        []
        []
        []
        Nothing
        (Json.Decode.list Api.Data.userResponseDecoder)
        |> Api.withBearerToken auth_token



readUsers : Uuid -> String -> Api.Request Api.Data.UserResponse
readUsers id_path auth_token =
    Api.request
        "GET"
        "/users/{id}"
        [ ( "id", Uuid.toString id_path ) ]
        []
        []
        Nothing
        Api.Data.userResponseDecoder
        |> Api.withBearerToken auth_token



snippetsStatsGet : String -> Api.Request Api.Data.StatsResponse
snippetsStatsGet auth_token =
    Api.request
        "GET"
        "/snippets/stats"
        []
        []
        []
        Nothing
        Api.Data.statsResponseDecoder
        |> Api.withBearerToken auth_token



termsGraphGet : String -> Api.Request Api.Data.TermGraphResponse
termsGraphGet auth_token =
    Api.request
        "GET"
        "/terms/graph"
        []
        []
        []
        Nothing
        Api.Data.termGraphResponseDecoder
        |> Api.withBearerToken auth_token



updateSnippets : Uuid -> Api.Data.UpdateSnippet -> String -> Api.Request ()
updateSnippets id_path updateSnippet_body auth_token =
    Api.request
        "PUT"
        "/snippets/{id}"
        [ ( "id", Uuid.toString id_path ) ]
        []
        []
        (Just (Api.Data.encodeUpdateSnippet updateSnippet_body))
        (Json.Decode.succeed ())
        |> Api.withBearerToken auth_token



updateTerms : Uuid -> Api.Data.UpdateTerm -> String -> Api.Request ()
updateTerms id_path updateTerm_body auth_token =
    Api.request
        "PUT"
        "/terms/{id}"
        [ ( "id", Uuid.toString id_path ) ]
        []
        []
        (Just (Api.Data.encodeUpdateTerm updateTerm_body))
        (Json.Decode.succeed ())
        |> Api.withBearerToken auth_token



updateUsers : Uuid -> Api.Data.UpdateUser -> String -> Api.Request ()
updateUsers id_path updateUser_body auth_token =
    Api.request
        "PUT"
        "/users/{id}"
        [ ( "id", Uuid.toString id_path ) ]
        []
        []
        (Just (Api.Data.encodeUpdateUser updateUser_body))
        (Json.Decode.succeed ())
        |> Api.withBearerToken auth_token
